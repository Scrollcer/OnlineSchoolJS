//Task - Create recursion function wrap, which takes any primitive value and number of objects(depth) where value must be wrapped
//Upon getting to the depth of recursion, object must be returned
//Function wrap must be called with random (between 5 and 10) value
//Also create function unwrap, where argument target - object, generated by function wrap
//Upon getting to the base of recursion, primitive value must be returned

function getRandomInt(min, max) {
    min = Math.ceil(min);
    max = Math.floor(max);

    return Math.floor(Math.random() * (max - min + 1) + min);
}

function wrap(value, depth) {
    if (depth === 1) {
        return {value: value}
    }
    return {value: wrap(value, --depth)}
}

const wrappedObject = wrap(1, getRandomInt(5, 10))

console.log(wrappedObject)

function unwrap(object) {
    if (typeof object.value !== 'object') {
        return object.value
    }
    return unwrap(object.value)
}

console.log(unwrap(wrappedObject))
